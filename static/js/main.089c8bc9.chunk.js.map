{"version":3,"sources":["components/Alert.js","components/Nav.js","components/ImageList.js","components/ImageContainer.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["AlertMsg","props","Alert","variant","isShow","className","message","Navi","Navbar","bg","Brand","href","Toggle","aria-controls","Collapse","id","Text","won","Nav","score","highScore","images","ImageContainer","handleImageClick","Row","map","value","index","Col","key","Card","Body","src","data-name","onClick","width","height","GameContainer","state","clickedArr","imagesArr","event","shuffledArr","shuffle","newStateArray","slice","imgId","target","attributes","getNamedItem","includes","setState","element","document","querySelector","classList","add","setTimeout","remove","push","length","this","temp","newArr","ctr","Math","floor","random","Container","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.089c8bc9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction AlertMsg(props) {\r\n    return (<Alert variant={props.isShow} className=\"text-center\">\r\n        {props.message}\r\n    </Alert>);\r\n}\r\n\r\nexport default AlertMsg;","import React from \"react\";\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport Alert from \"./Alert\";\r\n\r\nfunction Navi(props) {\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand href=\"#home\">Clicky Game</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Navbar.Text className=\"ml-auto\">\r\n                    {(props.isShow ?\r\n                        <Alert isShow={props.isShow} message={props.message} />\r\n                        : <h1 className=\"text-center\">{(props.won) ? props.message : \"Click an image to begin!\"}</h1>)}\r\n                </Navbar.Text>\r\n            </Navbar.Collapse>\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"ml-auto\">\r\n                    <Navbar.Text><h3>Score: {props.score} | Top Score: {props.highScore}</h3></Navbar.Text>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default Navi;","const images = [\n    \"Gdyhq5vM5X4ly\",\n    \"HuGCwDXj4nQnS\",\n    \"ECtLJKdGj8jfy\",\n    \"cYVpEseXlkS1q\",\n    \"xT9DPzhNGA8MKjxwFG\",\n    \"kiGxsKmkY73ig\",\n    \"rSPU8hxlwg9WM\",\n    \"aqFuzQ98vdHLG\",\n    \"3oriO4kSYahYQr6e1a\",\n    \"TY8A0XNI9dsK4\",\n    \"OiKAQbQEQItxK\",\n    \"wxgimHAKx2xA4\"\n];\n\nexport default images;","import React from \"react\";\nimport { Row, Col, Card } from 'react-bootstrap';\n\nfunction ImageContainer({ handleImageClick, images }) {\n    return (\n        <Row>\n            {images.map((value, index) => (\n                <Col key={value} className=\"mt-3\">\n                    <Card>\n                        <Card.Body>\n                            <img src={`https://media.giphy.com/media/${value}/giphy.gif`} data-name={value} onClick={handleImageClick} width=\"200\" height=\"200\" />\n                        </Card.Body>\n                    </Card>\n                </Col>\n            ))}\n        </Row >\n    );\n}\n\nexport default ImageContainer;","import React, { Component } from 'react';\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Alert } from 'react-bootstrap';\nimport Nav from './Nav';\nimport images from './ImageList';\nimport ImageContainer from './ImageContainer';\n//import './App.css';\n\nclass GameContainer extends Component {\n    state = {\n        score: 0,\n        highScore: 0,\n        clickedArr: [],\n        imagesArr: [],\n        message: \"Click an image to begin!\",\n        isShow: false,\n        won: false\n    }\n\n    componentDidMount() {\n        this.setState({ imagesArr: this.shuffle() });\n    }\n\n    handleImageClick = event => {\n        let score = this.state.score;\n        let highScore = this.state.highScore;\n\n        const shuffledArr = this.shuffle();\n\n        // copy the state array in a new array to modify it\n        let newStateArray = this.state.clickedArr.slice();\n\n        const imgId = event.target.attributes.getNamedItem(\"data-name\").value;\n        if (this.state.clickedArr.includes(imgId)) {\n            this.setState({\n                score: 0,\n                highScore: highScore,\n                clickedArr: [],\n                imagesArr: shuffledArr,\n                message: \"You guessed incorrectly!\",\n                isShow: \"danger\",\n                won: false\n            });\n\n            const element = document.querySelector('.animatebutton');\n            element.classList.add('animated', 'shake');\n            setTimeout(function () {\n                element.classList.remove('shake');\n            }, 1000);\n        } else {\n            newStateArray.push(imgId);\n            highScore = (highScore === score) ? highScore + 1 : highScore;\n            score = score + 1;\n            this.setState({\n                score: (score === images.length) ? 0 : score,\n                highScore: highScore,\n                clickedArr: (score === images.length) ? [] : newStateArray,\n                imagesArr: shuffledArr,\n                message: (score === images.length) ? \"You won!!\" : \"You guessed correctly!\",\n                isShow: \"success\",\n                won: (score === images.length) ? true : false\n            });\n        }\n    }\n\n    shuffle() {\n        const newArr = images.slice();\n\n        var ctr = newArr.length, temp, index;\n\n        // While there are elements in the array\n        while (ctr > 0) {\n            // Pick a random index\n            index = Math.floor(Math.random() * ctr);\n            // Decrease ctr by 1\n            ctr--;\n            // And swap the last element with it\n            temp = newArr[ctr];\n            newArr[ctr] = newArr[index];\n            newArr[index] = temp;\n        }\n        return newArr;\n    }\n\n    render() {\n        return (\n            <>\n                <Nav isShow={this.state.isShow} won={this.state.won} message={this.state.message} score={this.state.score} highScore={this.state.highScore} />\n                <Container className=\"animatebutton\">\n                    <div>\n                        <h3 className=\"text-center\">\n                            <ImageContainer images={this.state.imagesArr} handleImageClick={this.handleImageClick} />\n                        </h3>\n                    </div>\n                </Container>\n            </>\n        );\n    }\n}\n\nexport default GameContainer;\n","import React from 'react';\nimport GameContainer from \"./components/GameContainer\";\n\nfunction App() {\n  return (<GameContainer />);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}