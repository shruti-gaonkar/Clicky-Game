{"version":3,"sources":["components/ImageList.js","components/ImageContainer.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["images","ImageContainer","handleImageClick","Row","map","value","index","Col","src","data-name","onClick","width","height","GameContainer","state","score","highScore","clickedArr","imagesArr","message","event","shuffledArr","shuffle","newStateArray","slice","imgId","target","attributes","getNamedItem","includes","setState","push","this","temp","newArr","ctr","length","Math","floor","random","Navbar","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Text","Container","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8RAeeA,EAfA,CACX,gBACA,gBACA,gBACA,gBACA,qBACA,gBACA,gBACA,gBACA,qBACA,gBACA,gBACA,iB,gBCCWC,MAVf,YAAuD,IAA7BC,EAA4B,EAA5BA,iBAAkBF,EAAU,EAAVA,OACxC,OACI,kBAACG,EAAA,EAAD,KACKH,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,kBAACC,EAAA,EAAD,KAAK,yBAAKC,IAAG,wCAAmCH,EAAnC,cAAsDI,YAAWJ,EAAOK,QAASR,EAAkBS,MAAM,MAAMC,OAAO,cCuFpIC,E,2MAtFXC,MAAQ,CACJC,MAAO,EACPC,UAAW,EACXC,WAAY,GACZC,UAAW,GACXC,QAAS,4B,EAObjB,iBAAmB,SAAAkB,GACf,IAAIL,EAAQ,EAAKD,MAAMC,MACnBC,EAAY,EAAKF,MAAME,UAErBK,EAAc,EAAKC,UAGrBC,EAAgB,EAAKT,MAAMG,WAAWO,QAEpCC,EAAQL,EAAMM,OAAOC,WAAWC,aAAa,aAAavB,MAC5D,EAAKS,MAAMG,WAAWY,SAASJ,GAC/B,EAAKK,SAAS,CACVf,MAAO,EACPC,UAAWA,EACXC,WAAY,GACZC,UAAWG,EACXF,QAAS,8BAGbI,EAAcQ,KAAKN,GACnB,EAAKK,SAAS,CACVf,MAAOA,EAAQ,EACfC,UAAYA,IAAcD,EAASC,EAAY,EAAIA,EACnDC,WAAYM,EACZL,UAAWG,EACXF,QAAS,6B,mFA5BjBa,KAAKF,SAAS,CAAEZ,UAAWc,KAAKV,c,gCAuChC,IALA,IAEyBW,EAAM3B,EAFzB4B,EAASlC,EAAOwB,QAElBW,EAAMD,EAAOE,OAGVD,EAAM,GAET7B,EAAQ+B,KAAKC,MAAMD,KAAKE,SAAWJ,GAInCF,EAAOC,IAFPC,GAGAD,EAAOC,GAAOD,EAAO5B,GACrB4B,EAAO5B,GAAS2B,EAEpB,OAAOC,I,+BAIP,OACI,oCACI,kBAACM,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,eACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACV,EAAA,EAAOW,KAAR,eAAqBnB,KAAKlB,MAAMC,MAAhC,iBAAqDiB,KAAKlB,MAAME,cAI5E,kBAACoC,EAAA,EAAD,KACI,6BACI,wBAAIF,UAAU,eAAelB,KAAKlB,MAAMK,SACxC,wBAAI+B,UAAU,eACV,kBAAC,EAAD,CAAgBlD,OAAQgC,KAAKlB,MAAMI,UAAWhB,iBAAkB8B,KAAK9B,2B,GA9ErEmD,aCAbC,MAJf,WACE,OAAQ,kBAAC,EAAD,OCQUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpD,c","file":"static/js/main.05d55290.chunk.js","sourcesContent":["const images = [\n    \"Gdyhq5vM5X4ly\",\n    \"HuGCwDXj4nQnS\",\n    \"ECtLJKdGj8jfy\",\n    \"cYVpEseXlkS1q\",\n    \"xT9DPzhNGA8MKjxwFG\",\n    \"kiGxsKmkY73ig\",\n    \"rSPU8hxlwg9WM\",\n    \"aqFuzQ98vdHLG\",\n    \"3oriO4kSYahYQr6e1a\",\n    \"TY8A0XNI9dsK4\",\n    \"OiKAQbQEQItxK\",\n    \"wxgimHAKx2xA4\"\n];\n\nexport default images;","import React from \"react\";\nimport { Row, Col } from 'react-bootstrap';\n\nfunction ImageContainer({ handleImageClick, images }) {\n    return (\n        <Row>\n            {images.map((value, index) => (\n                <Col><img src={`https://media.giphy.com/media/${value}/giphy.gif`} data-name={value} onClick={handleImageClick} width=\"200\" height=\"200\" /></Col>\n            ))}\n        </Row >\n    );\n}\n\nexport default ImageContainer;","import React, { Component } from 'react';\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav, Container } from 'react-bootstrap';\nimport images from './ImageList';\nimport ImageContainer from './ImageContainer';\n//import './App.css';\n\nclass GameContainer extends Component {\n    state = {\n        score: 0,\n        highScore: 0,\n        clickedArr: [],\n        imagesArr: [],\n        message: \"Click an image to begin!\"\n    }\n\n    componentDidMount() {\n        this.setState({ imagesArr: this.shuffle() });\n    }\n\n    handleImageClick = event => {\n        let score = this.state.score;\n        let highScore = this.state.highScore;\n\n        const shuffledArr = this.shuffle();\n\n        // copy the state array in a new array to modify it\n        let newStateArray = this.state.clickedArr.slice();\n\n        const imgId = event.target.attributes.getNamedItem(\"data-name\").value;\n        if (this.state.clickedArr.includes(imgId)) {\n            this.setState({\n                score: 0,\n                highScore: highScore,\n                clickedArr: [],\n                imagesArr: shuffledArr,\n                message: \"You guessed incorrectly!\"\n            });\n        } else {\n            newStateArray.push(imgId);\n            this.setState({\n                score: score + 1,\n                highScore: (highScore === score) ? highScore + 1 : highScore,\n                clickedArr: newStateArray,\n                imagesArr: shuffledArr,\n                message: \"You guessed correctly!\"\n            });\n        }\n    }\n\n    shuffle() {\n        const newArr = images.slice();\n\n        var ctr = newArr.length, temp, index;\n\n        // While there are elements in the array\n        while (ctr > 0) {\n            // Pick a random index\n            index = Math.floor(Math.random() * ctr);\n            // Decrease ctr by 1\n            ctr--;\n            // And swap the last element with it\n            temp = newArr[ctr];\n            newArr[ctr] = newArr[index];\n            newArr[index] = temp;\n        }\n        return newArr;\n    }\n\n    render() {\n        return (\n            <>\n                <Navbar bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand href=\"#home\">Clicky Game</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"ml-auto\">\n                            <Navbar.Text>Score: {this.state.score} | Top Score: {this.state.highScore}</Navbar.Text>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n                <Container>\n                    <div>\n                        <h1 className=\"text-center\">{this.state.message}</h1>\n                        <h3 className=\"text-center\">\n                            <ImageContainer images={this.state.imagesArr} handleImageClick={this.handleImageClick} />\n                        </h3>\n                    </div>\n                </Container>\n            </>\n        );\n    }\n}\n\nexport default GameContainer;\n","import React from 'react';\nimport GameContainer from \"./components/GameContainer\";\n\nfunction App() {\n  return (<GameContainer />);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}